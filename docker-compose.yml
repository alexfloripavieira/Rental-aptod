
services:
  ## PostgreSQL (compartilhado entre ambientes)
  db:
    image: postgres:15-alpine
    container_name: aptos-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aptos_db}
      POSTGRES_USER: ${POSTGRES_USER:-aptos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aptos_user} -d ${POSTGRES_DB:-aptos_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - aptos-network

  ## Redis cache
  redis:
    image: redis:7-alpine
    container_name: aptos-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aptos-network

  ## Django backend (produção por padrão)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: aptos-backend
    restart: unless-stopped
    user: "0:0"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-app.conf.production}
      POSTGRES_DB: ${POSTGRES_DB:-aptos_db}
      POSTGRES_USER: ${POSTGRES_USER:-aptos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-dev-key-change-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      DJANGO_STATIC_ROOT: ${DJANGO_STATIC_ROOT:-/app/static}
      DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS:-}
      DJANGO_CSRF_COOKIE_SECURE: ${DJANGO_CSRF_COOKIE_SECURE:-True}
      DJANGO_SESSION_COOKIE_SECURE: ${DJANGO_SESSION_COOKIE_SECURE:-True}
      DJANGO_CSRF_COOKIE_SAMESITE: ${DJANGO_CSRF_COOKIE_SAMESITE:-Lax}
      DJANGO_SESSION_COOKIE_SAMESITE: ${DJANGO_SESSION_COOKIE_SAMESITE:-Lax}
      DJANGO_CORS_ALLOWED_ORIGINS: ${DJANGO_CORS_ALLOWED_ORIGINS:-}
      DJANGO_CORS_ALLOW_CREDENTIALS: ${DJANGO_CORS_ALLOW_CREDENTIALS:-True}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/1}
    volumes:
      - media_volume:/app/media
      - static_volume:/app/static
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aptos-network

  ## Nginx reverse proxy (exposto em overrides conforme necessário)
  nginx:
    build:
      context: ./nginx
    container_name: aptos-nginx
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aptos-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_volume:
    driver: local
  static_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  aptos-network:
    driver: bridge
