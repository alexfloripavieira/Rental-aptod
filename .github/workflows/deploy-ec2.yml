name: Deploy to EC2 (legacy, manual only)

on:
  # Desativado em pushes para evitar rodar junto com o Lightsail
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type YES to run the legacy EC2 deploy"
        required: true
        default: "NO"

jobs:
  build-and-deploy:
    # S√≥ executa se o usu√°rio disparar manualmente e confirmar com YES
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.confirm == 'YES' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django system check
        env:
          DJANGO_SETTINGS_MODULE: app.conf.production
          DJANGO_LOG_DIR: ${{ runner.temp }}/logs
        run: |
          python manage.py check

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend (sanity check)
        run: |
          cd frontend
          npm install
          npm run build

      - name: Validate built frontend assets
        run: |
          node scripts/validate-dist-assets.js

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 45m
          envs: REMOTE_BRANCH,CERTBOT_EMAIL
          script: |
            set -euo pipefail
            echo "üöÄ Starting deployment..."

            # Set branch
            branch="${REMOTE_BRANCH:-main}"
            echo "üì¶ Deploying branch: $branch"

            # Navigate to project directory
            cd ~/Rental-aptod || { echo "‚ùå Directory ~/Rental-aptod not found"; exit 1; }

            # Check if .env exists
            if [ ! -f .env ]; then
              echo "‚ùå .env file not found in ~/Rental-aptod/"
              echo "Please create .env file with required environment variables"
              exit 1
            fi

            # Ensure comment-only lines are valid for docker compose by prefixing with '# '
            if grep -qE '^[[:space:]]*[^#=][^=]*$' .env; then
              echo "üõ†Ô∏è Normalizing comments inside .env"
              tmp_env=$(mktemp)
              awk '{
                if ($0 ~ /^[[:space:]]*$/) { print; next }
                if ($0 ~ /^[[:space:]]*#/) { print; next }
                if (index($0, "=") > 0) { print; next }
                sub(/^[[:space:]]*/, "# ")
                print
                next
              }
              { print }' .env > "$tmp_env"
              mv "$tmp_env" .env
            fi

            echo "üîÑ Updating code..."
            git fetch --all
            git checkout "$branch"
            git reset --hard "origin/$branch"

            # Stop containers gracefully (keep volumes)
            echo "üõë Stopping containers..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production down || true

            # Clean up to free disk space (but keep images and volumes)
            echo "üßπ Cleaning up disk space..."
            docker container prune -f || true
            docker builder prune -f || true
            sudo rm -rf frontend/node_modules || true

            # Build and start containers
            echo "üî® Building and starting containers..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production up -d --build

            # Wait for services to be ready
            echo "‚è≥ Waiting backend to become healthy..."
            for i in $(seq 1 40); do
              if docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T backend curl -fsS http://localhost:8000/api/v1/health/ >/dev/null 2>&1; then
                echo "‚úÖ Backend healthy after $i checks"; break; fi; sleep 3; done
            echo "üîç Container status:"; docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production ps
            # If still not healthy, print logs and fail
            if ! docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T backend curl -fsS http://localhost:8000/api/v1/health/ >/dev/null 2>&1; then
              echo "‚ùå Backend not healthy. Tail logs:"; docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production logs --tail=200 backend || true; exit 1; fi

            echo "üîé Validating served frontend assets..."
            # Extra√ß√£o robusta dos assets: agora os bundles ficam em /static/assets/js e /static/assets/css
            # Aceita subdiret√≥rios (js|css) e nomes com h√≠fen, ponto e underscore
            ASSETS=$(docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T backend sh -lc "grep -oE '/static/assets/[A-Za-z0-9._\/-]+\\.(js|css)' app/templates/index.html | sort -u")
            if [ -z "$ASSETS" ]; then
              echo "‚ùå N√£o foi poss√≠vel extrair assets do index.html" >&2
              exit 1
            fi
            ok=1
            while IFS= read -r asset; do
              echo " - testando: http://localhost$asset"
              if ! curl -fsS "http://localhost$asset" >/dev/null; then
                echo "‚ùå Falhou: $asset"
                ok=0
              fi
            done <<< "$ASSETS"
            if [ "$ok" -ne 1 ]; then
              echo "‚ùå Valida√ß√£o de assets falhou"
              exit 1
            fi
            echo "‚úÖ Assets do frontend servidos com sucesso"

            # SSL certificates (Let's Encrypt via webroot)
            echo "üîê Ensuring Let's Encrypt certificates..."
            if [ -n "${CERTBOT_EMAIL:-}" ]; then
              docker run --rm \
                -v rental-aptod_certbot_webroot:/var/www/certbot \
                -v rental-aptod_ssl_certs_volume:/etc/letsencrypt \
                certbot/certbot certonly --webroot \
                  -w /var/www/certbot \
                  -d seualuguelfacil.com.br -d www.seualuguelfacil.com.br \
                  --email "$CERTBOT_EMAIL" --agree-tos --non-interactive --keep-until-expiring || true
            else
              echo "‚ÑπÔ∏è CERTBOT_EMAIL not set; issuing without email (not recommended)"
              docker run --rm \
                -v rental-aptod_certbot_webroot:/var/www/certbot \
                -v rental-aptod_ssl_certs_volume:/etc/letsencrypt \
                certbot/certbot certonly --webroot \
                  -w /var/www/certbot \
                  -d seualuguelfacil.com.br -d www.seualuguelfacil.com.br \
                  --register-unsafely-without-email --agree-tos --non-interactive --keep-until-expiring || true
            fi
            # Re-enable SSL config if disabled and reload nginx
            if docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T nginx sh -lc '[ -f /etc/nginx/conf.d/default-ssl.conf.disabled ]'; then
              docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T nginx sh -lc 'mv /etc/nginx/conf.d/default-ssl.conf.disabled /etc/nginx/conf.d/default-ssl.conf && nginx -t' || true
              docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production restart nginx || true
            else
              docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T nginx nginx -s reload || true
            fi
            # Show certificate files for debugging
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T nginx sh -lc 'ls -l /etc/nginx/ssl/live/seualuguelfacil.com.br || true'

            echo "üéâ Deployment completed!"
        env:
          REMOTE_BRANCH: ${{ github.ref_name }}

      - name: Cleanup old images (remote)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          timeout: 60m
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker image prune -af || true
