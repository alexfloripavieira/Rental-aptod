name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django system check
        env:
          DJANGO_SETTINGS_MODULE: app.conf.production
          DJANGO_LOG_DIR: ${{ runner.temp }}/logs
        run: |
          python manage.py check

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend (sanity check)
        run: |
          cd frontend
          npm install
          npm run build

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REMOTE_BRANCH
          script: |
            set -euo pipefail
            branch="${REMOTE_BRANCH:-main}"
            cd ~/Rental-aptod
            git fetch --all
            git checkout "$branch"
            git reset --hard "origin/$branch"
            # Build frontend and copy static files
            make build-frontend-prod
            # Start production services
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production up -d --build
        env:
          REMOTE_BRANCH: ${{ github.ref_name }}

      - name: Cleanup old images (remote)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker image prune -af || true
