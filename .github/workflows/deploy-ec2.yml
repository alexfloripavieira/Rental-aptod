name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django system check
        env:
          DJANGO_SETTINGS_MODULE: app.conf.production
          DJANGO_LOG_DIR: ${{ runner.temp }}/logs
        run: |
          python manage.py check

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend (sanity check)
        run: |
          cd frontend
          npm install
          npm run build

      - name: Validate built frontend assets
        run: |
          node scripts/validate-dist-assets.js

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          envs: REMOTE_BRANCH
          script: |
            set -euo pipefail
            echo "üöÄ Starting deployment..."

            # Set branch
            branch="${REMOTE_BRANCH:-main}"
            echo "üì¶ Deploying branch: $branch"

            # Navigate to project directory
            cd ~/Rental-aptod || { echo "‚ùå Directory ~/Rental-aptod not found"; exit 1; }

            # Check if .env exists
            if [ ! -f .env ]; then
              echo "‚ùå .env file not found in ~/Rental-aptod/"
              echo "Please create .env file with required environment variables"
              exit 1
            fi

            # Ensure comment-only lines are valid for docker compose by prefixing with '# '
            if grep -qE '^[[:space:]]*[^#=][^=]*$' .env; then
              echo "üõ†Ô∏è Normalizing comments inside .env"
              tmp_env=$(mktemp)
              awk '{
                if ($0 ~ /^[[:space:]]*$/) { print; next }
                if ($0 ~ /^[[:space:]]*#/) { print; next }
                if (index($0, "=") > 0) { print; next }
                sub(/^[[:space:]]*/, "# ")
                print
                next
              }
              { print }' .env > "$tmp_env"
              mv "$tmp_env" .env
            fi

            echo "üîÑ Updating code..."
            git fetch --all
            git checkout "$branch"
            git reset --hard "origin/$branch"

            # Stop containers gracefully
            echo "üõë Stopping containers..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production down || true

            # Clean up to free disk space
            echo "üßπ Cleaning up disk space..."
            docker system prune -f --volumes || true
            docker builder prune -f || true
            sudo rm -rf frontend/node_modules || true

            # Build and start containers
            echo "üî® Building and starting containers..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production up -d --build

            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 30

            # Check if containers are running
            echo "üîç Checking container status..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production ps

            # Test if backend is responding
            echo "ü©∫ Testing backend health..."
            if curl -f http://localhost:8000/api/v1/health/ &>/dev/null; then
              echo "‚úÖ Backend is healthy"
            else
              echo "‚ö†Ô∏è Backend health check failed, checking logs..."
              docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production logs backend --tail 20
            fi

            echo "üîé Validating served frontend assets..."
            ASSETS=$(docker compose -f docker-compose.yml -f docker-compose.prod.yml --profile production exec -T backend sh -lc "grep -oE '/static/assets/[A-Za-z0-9._-]+\\.(js|css)' app/templates/index.html | sort -u")
            if [ -z "$ASSETS" ]; then
              echo "‚ùå N√£o foi poss√≠vel extrair assets do index.html" >&2
              exit 1
            fi
            ok=1
            while IFS= read -r asset; do
              echo " - testando: http://localhost$asset"
              if ! curl -fsS "http://localhost$asset" >/dev/null; then
                echo "‚ùå Falhou: $asset"
                ok=0
              fi
            done <<< "$ASSETS"
            if [ "$ok" -ne 1 ]; then
              echo "‚ùå Valida√ß√£o de assets falhou"
              exit 1
            fi
            echo "‚úÖ Assets do frontend servidos com sucesso"

            echo "üéâ Deployment completed!"
        env:
          REMOTE_BRANCH: ${{ github.ref_name }}

      - name: Cleanup old images (remote)
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker image prune -af || true
